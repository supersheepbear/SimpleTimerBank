{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Simple Timer Bank","text":"<p>Simple Timer Bank is a sophisticated desktop application designed to help you manage your time like a financial asset. By \"banking\" your time, you can make conscious decisions about how you spend it, improving focus and productivity.</p> <p>The application is built using Python and the PySide6 framework, featuring a polished, intuitive user interface.</p> <p></p>"},{"location":"#the-philosophy","title":"The Philosophy","text":"<p>The core idea is to treat time as a finite resource. Before you can \"spend\" time on an activity, you must first \"deposit\" it into your bank. This simple act makes you more aware of your time allocation. The timer lets you spend your banked time on focused sessions, and the overdraft feature ensures you're aware when you exceed your planned duration.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Visual Time Bank: A large, digital display shows your exact time balance (HH:MM:SS).</li> <li>Full-Featured Timer: A second digital display shows the active timer, which can be started, paused, resumed, and stopped.</li> <li>Transaction Management:<ul> <li>Deposit or instantly withdraw time from your bank.</li> <li>Set your balance directly to a specific value.</li> <li>Use relative preset buttons (<code>+15m</code>, <code>-30m</code>, <code>+1h</code>) to quickly modify the transaction amount.</li> </ul> </li> <li>Automatic Overdraft &amp; Refunds:<ul> <li>When a timer finishes, it automatically enters Overdraft Mode, withdrawing from your main balance and triggering a non-blocking system notification with sound.</li> <li>If you stop a timer early, the unused time is instantly refunded to your bank.</li> </ul> </li> <li>Data Persistence: Your balance is always saved on exit and reloaded on start.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to take control of your time? Head over to the Usage Guide to learn how to install and use the application.</p>"},{"location":"api_reference/","title":"API Reference","text":"<p>This page provides the auto-generated API documentation from the docstrings in the Simple Timer Bank source code.</p> <p>This documentation is generated using <code>mkdocs</code> and the <code>mkdocstrings</code> plugin. To generate or update this documentation locally, run the following command from the project root:</p> <pre><code>make doc\n</code></pre>"},{"location":"api_reference/#core-logic","title":"Core Logic","text":""},{"location":"api_reference/#simpletimerbank.core.app_state","title":"<code>simpletimerbank.core.app_state</code>","text":"<p>Application state management module.</p> <p>This module defines the classes responsible for managing the application's core logic and state. It acts as an intermediary between the user interface and the underlying data models (TimeBank, CountdownTimer, etc.).</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState","title":"<code>AppState</code>","text":"<p>Manages the core application state and business logic.</p> <p>This class orchestrates the interactions between the TimeBank, CountdownTimer, PersistenceService, and NotificationService. It is responsible for handling session management (start, stop, pause, resume), timer ticks, overdraft logic, and the application's startup and shutdown sequences (including data persistence). It is not directly exposed to the GUI.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.__init__","title":"<code>__init__()</code>","text":"<p>Initialize AppState with all core service components.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.get_countdown_timer","title":"<code>get_countdown_timer()</code>","text":"<p>Get reference to the countdown timer.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.get_countdown_timer--returns","title":"Returns","text":"<p>CountdownTimer     Reference to CountdownTimer instance.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.get_notification_service","title":"<code>get_notification_service()</code>","text":"<p>Get reference to the notification service.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.get_notification_service--returns","title":"Returns","text":"<p>NotificationService     Reference to NotificationService instance.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.get_persistence_service","title":"<code>get_persistence_service()</code>","text":"<p>Get reference to the persistence service.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.get_persistence_service--returns","title":"Returns","text":"<p>PersistenceService     Reference to PersistenceService instance.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.get_time_bank","title":"<code>get_time_bank()</code>","text":"<p>Get the application's TimeBank instance.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.get_time_bank--returns","title":"Returns","text":"<p>TimeBank     The singleton TimeBank instance containing the user's balance.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.initialize","title":"<code>initialize()</code>","text":"<p>Initialize the application state.</p> <p>This method should be called once at startup. It loads the saved time balance from the persistence service and restores it.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.pause_session","title":"<code>pause_session()</code>","text":"<p>Pause the current timer session.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.resume_session","title":"<code>resume_session()</code>","text":"<p>Resume a paused timer session.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.set_timer_completion_callback","title":"<code>set_timer_completion_callback(callback)</code>","text":"<p>Set callback function for timer completion.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.set_timer_completion_callback--parameters","title":"Parameters","text":"<p>callback : Callable[[], None]     Function to call when timer completes initial countdown.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.set_timer_tick_callback","title":"<code>set_timer_tick_callback(callback)</code>","text":"<p>Set callback function for timer ticks.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.set_timer_tick_callback--parameters","title":"Parameters","text":"<p>callback : Callable[[int], None]     Function to call with remaining seconds on each tick.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.shutdown","title":"<code>shutdown()</code>","text":"<p>Shut down the application and persist the current state.</p> <p>This method should be called once when the application is closing. It ensures the current time balance is saved to disk.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.start_session","title":"<code>start_session(duration_seconds)</code>","text":"<p>Start a new timer session with the specified duration.</p> <p>This withdraws time from the bank and starts the timer.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.start_session--parameters","title":"Parameters","text":"<p>duration_seconds : int     Duration of the session in seconds.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.start_session--returns","title":"Returns","text":"<p>bool     True if session started successfully, False if insufficient balance.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.stop_session","title":"<code>stop_session()</code>","text":"<p>Stop the current timer session.</p> <p>This will refund any remaining time to the bank if the timer has not entered overdraft mode.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppState.tick_timer","title":"<code>tick_timer()</code>","text":"<p>Process a timer tick.</p> <p>This should be called by a timing mechanism (like a QTimer) at regular intervals (typically every second) when the timer is running.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager","title":"<code>AppStateManager</code>","text":"<p>GUI-friendly wrapper for AppState that provides simplified methods for the user interface layer.</p> <p>This class serves as an interface between the GUI and the core application state, providing methods that map well to UI interactions.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.__init__","title":"<code>__init__()</code>","text":"<p>Initialize AppStateManager with a new AppState instance.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.add_time","title":"<code>add_time(seconds)</code>","text":"<p>Deposit a specific amount of time into the time bank.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.add_time--parameters","title":"Parameters","text":"<p>seconds : int     The amount of time to add in seconds.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.get_balance_formatted","title":"<code>get_balance_formatted()</code>","text":"<p>Get the current time balance formatted as HH:MM:SS.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.get_balance_formatted--returns","title":"Returns","text":"<p>str     Formatted time string.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.get_balance_seconds","title":"<code>get_balance_seconds()</code>","text":"<p>Get the current time balance in seconds.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.get_balance_seconds--returns","title":"Returns","text":"<p>int     Balance in seconds.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.get_notification_service","title":"<code>get_notification_service()</code>","text":"<p>Get the notification service instance.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.get_notification_service--returns","title":"Returns","text":"<p>NotificationService     The notification service instance.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.get_time_bank","title":"<code>get_time_bank()</code>","text":"<p>Get the time balance instance.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.get_time_bank--returns","title":"Returns","text":"<p>TimeBank     The time balance instance.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.get_timer_state","title":"<code>get_timer_state()</code>","text":"<p>Get the current state of the countdown timer.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.get_timer_state--returns","title":"Returns","text":"<p>TimerState     The current state (e.g., IDLE, RUNNING, PAUSED).</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.initialize","title":"<code>initialize()</code>","text":"<p>Initialize the application state and prepare for use.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.is_overdrafting","title":"<code>is_overdrafting()</code>","text":"<p>Check if the timer is currently in overdraft mode.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.is_overdrafting--returns","title":"Returns","text":"<p>bool     True if the timer has exhausted its initial duration and is now     withdrawing time from the bank, False otherwise.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.pause_timer","title":"<code>pause_timer()</code>","text":"<p>Pause the currently running timer session.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.resume_timer","title":"<code>resume_timer()</code>","text":"<p>Resume a paused timer session.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.set_balance","title":"<code>set_balance(seconds)</code>","text":"<p>Set the time bank balance to a specific value.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.set_balance--parameters","title":"Parameters","text":"<p>seconds : int     The new balance value in seconds.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.set_qt_timer","title":"<code>set_qt_timer(timer)</code>","text":"<p>Set the QTimer instance used for timer ticks.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.set_qt_timer--parameters","title":"Parameters","text":"<p>timer : QTimer     The QTimer instance.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.set_timer_callback","title":"<code>set_timer_callback(callback)</code>","text":"<p>Register a callback function to be executed on each timer tick.</p> <p>The provided callback will be invoked by the core logic each second the timer runs, allowing the GUI to update accordingly.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.set_timer_callback--parameters","title":"Parameters","text":"<p>callback : Callable[[int], None]     A function that accepts one integer argument (remaining_seconds).</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.set_timer_completion_callback","title":"<code>set_timer_completion_callback(callback)</code>","text":"<p>Register a callback function for when the timer completes.</p> <p>The provided callback is invoked at the moment the timer's initial duration reaches zero and it transitions into overdraft mode.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.set_timer_completion_callback--parameters","title":"Parameters","text":"<p>callback : Callable[[], None]     A function that will be called upon timer completion.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.shutdown","title":"<code>shutdown()</code>","text":"<p>Shutdown the application and save state.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.start_timer","title":"<code>start_timer(duration)</code>","text":"<p>Start a new timer session.</p> <p>This attempts to withdraw the specified duration from the time bank and, if successful, starts the countdown.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.start_timer--parameters","title":"Parameters","text":"<p>duration : int     The duration for the timer session in seconds.</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.start_timer--returns","title":"Returns","text":"<p>bool     True if the timer was successfully started, False otherwise (e.g.,     due to insufficient balance).</p>"},{"location":"api_reference/#simpletimerbank.core.app_state.AppStateManager.stop_timer","title":"<code>stop_timer()</code>","text":"<p>Stop the current timer session and refund unused time.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer","title":"<code>simpletimerbank.core.countdown_timer</code>","text":"<p>Countdown timer management module.</p> <p>This module contains the CountdownTimer class, which encapsulates the logic for a countdown timer that supports starting, pausing, resuming, and stopping. It includes a key feature for \"overdraft\" mode.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer","title":"<code>CountdownTimer</code>","text":"<p>Manages all operations for a countdown timer session.</p> <p>This class handles the core timer mechanics, including state transitions (IDLE, RUNNING, PAUSED, STOPPED). Its main responsibility is to manage the countdown of a specified duration. When the countdown reaches zero, it seamlessly transitions into \"overdraft\" mode, where it continues to tick and signals that time should be withdrawn from an external source (like a TimeBank). It also manages callbacks for ticks and completion events.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.__init__","title":"<code>__init__()</code>","text":"<p>Initialize CountdownTimer in an IDLE state.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.get_remaining_seconds","title":"<code>get_remaining_seconds()</code>","text":"<p>Get the remaining seconds on the timer's initial duration.</p> <p>This value decrements during a normal countdown. In overdraft mode, it will be 0.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.get_remaining_seconds--returns","title":"Returns","text":"<p>int     The number of seconds remaining in the countdown.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.get_state","title":"<code>get_state()</code>","text":"<p>Get the current state of the timer.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.get_state--returns","title":"Returns","text":"<p>TimerState     The current state, e.g., IDLE, RUNNING, PAUSED, or STOPPED.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.is_overdrafting","title":"<code>is_overdrafting()</code>","text":"<p>Check if the timer is currently in overdraft mode.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.is_overdrafting--returns","title":"Returns","text":"<p>bool     True if the timer's initial duration has elapsed and it is now     counting up in overdraft; False otherwise.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.pause","title":"<code>pause()</code>","text":"<p>Pause the currently running countdown timer.</p> <p>The timer's remaining time is preserved. Does nothing if the timer is not currently running.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.pause--raises","title":"Raises","text":"<p>ValueError     If the timer is not in the RUNNING state.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.resume","title":"<code>resume()</code>","text":"<p>Resume a timer that was previously paused.</p> <p>Sets the timer's state back to RUNNING. Does nothing if the timer is not paused.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.resume--raises","title":"Raises","text":"<p>ValueError     If the timer is not in the PAUSED state.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.set_completion_callback","title":"<code>set_completion_callback(callback)</code>","text":"<p>Register a callback to be executed when the timer first hits zero.</p> <p>This callback is fired once at the exact moment the timer transitions from its normal countdown to overdraft mode.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.set_completion_callback--parameters","title":"Parameters","text":"<p>callback : Callable[[], None]     A function to call when the timer's duration is complete.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.set_tick_callback","title":"<code>set_tick_callback(callback)</code>","text":"<p>Register a callback to be executed on each tick while running.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.set_tick_callback--parameters","title":"Parameters","text":"<p>callback : Callable[[int], None]     A function to call with the remaining seconds on each tick.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.start","title":"<code>start(duration)</code>","text":"<p>Start a new countdown timer session with a specified duration.</p> <p>This resets the timer to the given duration and puts it in the RUNNING state. It also resets the overdraft flag.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.start--parameters","title":"Parameters","text":"<p>duration : int     The duration in seconds for the new timer session.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.start--raises","title":"Raises","text":"<p>ValueError     If the duration is not a positive integer or if the timer is     already running.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.stop","title":"<code>stop()</code>","text":"<p>Stop the timer session completely.</p> <p>This moves the timer to the STOPPED state. If the timer is stopped before its duration is complete (i.e., not in overdraft), the remaining seconds are preserved to allow for a refund. If stopped during overdraft, the remaining time is set to zero.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.stop--raises","title":"Raises","text":"<p>ValueError     If the timer is already stopped or has never been started.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.tick","title":"<code>tick()</code>","text":"<p>Process a single one-second tick of the timer.</p> <p>This is the core method that drives the countdown. It should be called once per second. It decrements the remaining time. If the timer reaches zero, it enables overdraft mode and fires the completion callback. On subsequent ticks in overdraft mode, it returns a value to indicate that one second should be withdrawn from the bank.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.CountdownTimer.tick--returns","title":"Returns","text":"<p>Optional[int]     Returns 1 if a second of overdraft occurred, otherwise returns None.</p>"},{"location":"api_reference/#simpletimerbank.core.countdown_timer.TimerState","title":"<code>TimerState</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enumeration of possible timer states.</p>"},{"location":"api_reference/#simpletimerbank.core.time_bank","title":"<code>simpletimerbank.core.time_bank</code>","text":"<p>Time bank management module.</p> <p>This module contains the TimeBank class responsible for managing a time balance with banking operations (deposit, withdraw).</p>"},{"location":"api_reference/#simpletimerbank.core.time_bank.TimeBank","title":"<code>TimeBank</code>","text":"<p>Manages time banking operations for the SimpleTimerBank application.</p> <p>This class handles depositing and withdrawing time from the user's balance, and provides methods to access and modify the balance.</p>"},{"location":"api_reference/#simpletimerbank.core.time_bank.TimeBank.__init__","title":"<code>__init__()</code>","text":"<p>Initialize TimeBank with zero balance.</p>"},{"location":"api_reference/#simpletimerbank.core.time_bank.TimeBank.deposit","title":"<code>deposit(seconds)</code>","text":"<p>Deposit time to the balance.</p>"},{"location":"api_reference/#simpletimerbank.core.time_bank.TimeBank.deposit--parameters","title":"Parameters","text":"<p>seconds : int     Number of seconds to add to the balance.</p>"},{"location":"api_reference/#simpletimerbank.core.time_bank.TimeBank.deposit--raises","title":"Raises","text":"<p>ValueError     If seconds is negative.</p>"},{"location":"api_reference/#simpletimerbank.core.time_bank.TimeBank.get_balance","title":"<code>get_balance()</code>","text":"<p>Get current balance in seconds.</p>"},{"location":"api_reference/#simpletimerbank.core.time_bank.TimeBank.get_balance--returns","title":"Returns","text":"<p>int     Current time balance in seconds.</p>"},{"location":"api_reference/#simpletimerbank.core.time_bank.TimeBank.set_balance","title":"<code>set_balance(seconds)</code>","text":"<p>Set the balance to an absolute value.</p>"},{"location":"api_reference/#simpletimerbank.core.time_bank.TimeBank.set_balance--parameters","title":"Parameters","text":"<p>seconds : int     The total number of seconds to set the balance to.</p>"},{"location":"api_reference/#simpletimerbank.core.time_bank.TimeBank.set_balance--raises","title":"Raises","text":"<p>ValueError     If seconds is negative.</p>"},{"location":"api_reference/#simpletimerbank.core.time_bank.TimeBank.withdraw","title":"<code>withdraw(seconds)</code>","text":"<p>Withdraw time from the balance.</p>"},{"location":"api_reference/#simpletimerbank.core.time_bank.TimeBank.withdraw--parameters","title":"Parameters","text":"<p>seconds : int     Number of seconds to withdraw from the balance.</p>"},{"location":"api_reference/#simpletimerbank.core.time_bank.TimeBank.withdraw--raises","title":"Raises","text":"<p>ValueError     If seconds is negative or if the balance is insufficient.</p>"},{"location":"api_reference/#simpletimerbank.core.notification_service","title":"<code>simpletimerbank.core.notification_service</code>","text":"<p>Notification service module.</p> <p>This module provides a service for sending desktop notifications to the user. It also includes functionality to play a notification sound.</p>"},{"location":"api_reference/#simpletimerbank.core.notification_service.NotificationService","title":"<code>NotificationService</code>","text":"<p>Service for sending desktop notifications and playing sounds.</p> <p>This class handles sending various notifications and playing an alert sound. To use a custom sound, replace the <code>notification.wav</code> file in the <code>assets/sounds/</code> directory.</p>"},{"location":"api_reference/#simpletimerbank.core.notification_service.NotificationService.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the NotificationService.</p>"},{"location":"api_reference/#simpletimerbank.core.notification_service.NotificationService.notify_bank_depleted","title":"<code>notify_bank_depleted()</code>","text":"<p>Send a notification that the bank balance has been depleted.</p> <p>This notification is sent when the timer is in overdraft mode and the bank balance reaches zero.</p>"},{"location":"api_reference/#simpletimerbank.core.notification_service.NotificationService.notify_overdraft_started","title":"<code>notify_overdraft_started()</code>","text":"<p>Send a notification that overdraft mode has started.</p> <p>This is similar to notify_timer_completed but with a focus on the fact that the bank is now being depleted.</p>"},{"location":"api_reference/#simpletimerbank.core.notification_service.NotificationService.notify_timer_completed","title":"<code>notify_timer_completed()</code>","text":"<p>Send a notification that the timer has completed its initial countdown.</p> <p>This notification is sent when the timer reaches zero and transitions to overdraft mode.</p>"},{"location":"api_reference/#simpletimerbank.core.persistence","title":"<code>simpletimerbank.core.persistence</code>","text":"<p>Data persistence service module.</p> <p>This module contains the PersistenceService class responsible for saving and loading application data to/from persistent storage.</p>"},{"location":"api_reference/#simpletimerbank.core.persistence.PersistenceService","title":"<code>PersistenceService</code>","text":"<p>Manages data persistence for the SimpleTimerBank application.</p> <p>This class handles saving and loading application state (time balance, settings, etc.) to and from local storage files.</p>"},{"location":"api_reference/#simpletimerbank.core.persistence.PersistenceService.__init__","title":"<code>__init__(data_file=None)</code>","text":"<p>Initialize PersistenceService.</p>"},{"location":"api_reference/#simpletimerbank.core.persistence.PersistenceService.__init__--parameters","title":"Parameters","text":"<p>data_file : Path, optional     Path to the data file. If None, uses default location.</p>"},{"location":"api_reference/#simpletimerbank.core.persistence.PersistenceService.data_file_exists","title":"<code>data_file_exists()</code>","text":"<p>Check if data file exists.</p>"},{"location":"api_reference/#simpletimerbank.core.persistence.PersistenceService.data_file_exists--returns","title":"Returns","text":"<p>bool     True if data file exists, False otherwise.</p>"},{"location":"api_reference/#simpletimerbank.core.persistence.PersistenceService.get_default_data_path","title":"<code>get_default_data_path()</code>","text":"<p>Get the default data file path.</p>"},{"location":"api_reference/#simpletimerbank.core.persistence.PersistenceService.get_default_data_path--returns","title":"Returns","text":"<p>Path     Default path for application data file.</p>"},{"location":"api_reference/#simpletimerbank.core.persistence.PersistenceService.load_data","title":"<code>load_data()</code>","text":"<p>Load application data from persistent storage.</p>"},{"location":"api_reference/#simpletimerbank.core.persistence.PersistenceService.load_data--returns","title":"Returns","text":"<p>dict     Dictionary containing loaded application data.     Returns empty dict if no data file exists.</p>"},{"location":"api_reference/#simpletimerbank.core.persistence.PersistenceService.save_data","title":"<code>save_data(data)</code>","text":"<p>Save application data to persistent storage.</p>"},{"location":"api_reference/#simpletimerbank.core.persistence.PersistenceService.save_data--parameters","title":"Parameters","text":"<p>data : dict     Dictionary containing application data to save.</p>"},{"location":"api_reference/#simpletimerbank.core.persistence.PersistenceService.save_data--returns","title":"Returns","text":"<p>bool     True if save was successful, False otherwise.</p>"},{"location":"api_reference/#gui-components","title":"GUI Components","text":""},{"location":"api_reference/#main-application-window","title":"Main Application Window","text":""},{"location":"api_reference/#simpletimerbank.gui.main_window","title":"<code>simpletimerbank.gui.main_window</code>","text":"<p>Main window for the SimpleTimerBank application.</p> <p>This module provides the main application window, which assembles all the GUI components and connects them to the core business logic.</p>"},{"location":"api_reference/#simpletimerbank.gui.main_window.MainWindow","title":"<code>MainWindow</code>","text":"<p>               Bases: <code>QMainWindow</code></p> <p>The main application window for SimpleTimerBank.</p> <p>This class sets up the main window, lays out all the custom widgets, and handles the integration between the GUI and the AppStateManager.</p>"},{"location":"api_reference/#simpletimerbank.gui.main_window.MainWindow.__init__","title":"<code>__init__(app_manager, parent=None)</code>","text":"<p>Initialize the MainWindow.</p>"},{"location":"api_reference/#simpletimerbank.gui.main_window.MainWindow.__init__--parameters","title":"Parameters","text":"<p>app_manager : AppStateManager     The application state manager instance. parent : QWidget, optional     The parent widget, by default None.</p>"},{"location":"api_reference/#simpletimerbank.gui.main_window.MainWindow.closeEvent","title":"<code>closeEvent(event)</code>","text":"<p>Handle window close event.</p> <p>This method ensures application state is saved when the window is closed.</p>"},{"location":"api_reference/#simpletimerbank.gui.main_window.MainWindow.closeEvent--parameters","title":"Parameters","text":"<p>event : QCloseEvent     The close event.</p>"},{"location":"api_reference/#custom-widgets","title":"Custom Widgets","text":""},{"location":"api_reference/#simpletimerbank.gui.widgets.time_display","title":"<code>simpletimerbank.gui.widgets.time_display</code>","text":"<p>Time display widget for SimpleTimerBank.</p> <p>This module provides a widget to display the time balance in a visually appealing, read-only digital clock format.</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.time_display.TimeDisplayWidget","title":"<code>TimeDisplayWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>A widget to display a time value using a large, digital-style label.</p> <p>This widget is used for displaying the main bank balance and is designed to be a clear, non-editable read-out of a time value formatted as HH:MM:SS. It supports a normal and an \"overdraft\" style to provide visual feedback.</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.time_display.TimeDisplayWidget.__init__","title":"<code>__init__(parent=None, font_family='Courier New')</code>","text":"<p>Initialize the TimeDisplayWidget.</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.time_display.TimeDisplayWidget.__init__--parameters","title":"Parameters","text":"<p>parent : QWidget, optional     The parent widget of this component. Defaults to None. font_family : str     The name of the font family to use for the digital display.     Defaults to \"Courier New\".</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.time_display.TimeDisplayWidget.set_overdraft_mode","title":"<code>set_overdraft_mode(is_overdraft)</code>","text":"<p>Set the visual style of the display to indicate overdraft status.</p> <p>In overdraft mode, the display uses a different color scheme (e.g., red) to visually indicate that the associated value is in a special state.</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.time_display.TimeDisplayWidget.set_overdraft_mode--parameters","title":"Parameters","text":"<p>is_overdraft : bool     True to switch to overdraft style, False for normal style.</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.time_display.TimeDisplayWidget.update_time","title":"<code>update_time(formatted_time)</code>","text":"<p>Update the time displayed on the widget.</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.time_display.TimeDisplayWidget.update_time--parameters","title":"Parameters","text":"<p>formatted_time : str     The time string to display, formatted as HH:MM:SS.</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.timer_control","title":"<code>simpletimerbank.gui.widgets.timer_control</code>","text":"<p>Timer control widget for SimpleTimerBank.</p> <p>This module provides a dedicated widget containing the primary controls for managing a timer session: Start, Pause, and Stop.</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.timer_control.TimerControlWidget","title":"<code>TimerControlWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>A widget for controlling the main countdown timer.</p> <p>This widget groups the 'Start Timer', 'Pause Timer', and 'Stop Timer &amp; Refund' buttons. It emits signals when these buttons are clicked and dynamically updates their enabled states and labels based on the current timer state (e.g., changing 'Start' to 'Resume').</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.timer_control.TimerControlWidget.pause_requested","title":"<code>pause_requested = Signal()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Signal emitted when the pause button is clicked.</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.timer_control.TimerControlWidget.start_requested","title":"<code>start_requested = Signal()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Signal emitted when the start/resume button is clicked.</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.timer_control.TimerControlWidget.stop_requested","title":"<code>stop_requested = Signal()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Signal emitted when the stop button is clicked.</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.timer_control.TimerControlWidget.__init__","title":"<code>__init__(parent=None)</code>","text":"<p>Initialize the TimerControlWidget and its buttons.</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.timer_control.TimerControlWidget.__init__--parameters","title":"Parameters","text":"<p>parent : QWidget, optional     The parent widget of this component. Defaults to None.</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.timer_control.TimerControlWidget.update_button_states","title":"<code>update_button_states(state)</code>","text":"<p>Update button enabled states and labels based on the timer's state.</p> <p>This method ensures that only valid actions are available to the user. For example, 'Pause' is only enabled when the timer is running, and the 'Start' button text changes to 'Resume' when the timer is paused.</p>"},{"location":"api_reference/#simpletimerbank.gui.widgets.timer_control.TimerControlWidget.update_button_states--parameters","title":"Parameters","text":"<p>state : TimerState     The current state of the countdown timer.</p>"},{"location":"contributing/","title":"Contributing to <code>SimpleTimerBank</code>","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/supersheepbear/SimpleTimerBank/issues</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement a fix for it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>SimpleTimerBank could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/supersheepbear/SimpleTimerBank/issues.</p> <p>If you are proposing a new feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>SimpleTimerBank</code> for local development. Please note this documentation assumes you already have <code>uv</code> and <code>Git</code> installed and ready to go.</p> <ol> <li> <p>Fork the <code>SimpleTimerBank</code> repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> </li> </ol> <pre><code>cd &lt;directory_in_which_repo_should_be_created&gt;\ngit clone git@github.com:YOUR_NAME/SimpleTimerBank.git\n</code></pre> <ol> <li>Now we need to install the environment. Navigate into the directory</li> </ol> <pre><code>cd SimpleTimerBank\n</code></pre> <p>Then, install and activate the environment with:</p> <pre><code>uv sync\n</code></pre> <ol> <li>Install pre-commit to run linters/formatters at commit time:</li> </ol> <pre><code>uv run pre-commit install\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> <ol> <li> <p>Don't forget to add test cases for your added functionality to the <code>tests</code> directory.</p> </li> <li> <p>When you're done making changes, check that your changes pass the formatting tests.</p> </li> </ol> <pre><code>make check\n</code></pre> <p>Now, validate that all unit tests are passing:</p> <pre><code>make test\n</code></pre> <ol> <li>Before raising a pull request you should also run tox.    This will run the tests across different versions of Python:</li> </ol> <pre><code>tox\n</code></pre> <p>This requires you to have multiple versions of python installed. This step is also triggered in the CI/CD pipeline, so you could also choose to skip this step locally.</p> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li> <p>The pull request should include tests.</p> </li> <li> <p>If the pull request adds functionality, the docs should be updated.    Put your new functionality into a function with a docstring, and add the feature to the list in <code>README.md</code>.</p> </li> </ol>"},{"location":"license/","title":"License","text":"<p>This project is licensed under the MIT License.</p> <p>Please see the LICENSE file in the root of the repository for the full text.</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide provides detailed instructions on how to install and use the Simple Timer Bank application.</p>"},{"location":"usage/#installation","title":"Installation","text":"<p>This project uses <code>uv</code> for dependency and environment management.</p> <ol> <li> <p>Clone the Repository:     <pre><code>git clone https://github.com/your-username/SimpleTimerBank.git\ncd SimpleTimerBank\n</code></pre></p> </li> <li> <p>Create and Activate Virtual Environment:     <pre><code># Create the venv\nuv venv\n\n# Activate the venv (Windows PowerShell)\n.venv\\Scripts\\Activate.ps1\n\n# On macOS/Linux, you would use:\n# source .venv/bin/activate\n</code></pre></p> </li> <li> <p>Install the Application:     Install the project in editable mode, which will also pull in all required dependencies like <code>PySide6</code> and <code>playsound</code>.     <pre><code>uv pip install -e .\n</code></pre></p> </li> </ol>"},{"location":"usage/#running-the-application","title":"Running the Application","text":"<p>Once the installation is complete, you can run the application with a single command:</p> <pre><code>python -m src.simpletimerbank.main\n</code></pre> <p>The application window will appear, ready for use.</p>"},{"location":"usage/#how-to-use-the-application","title":"How to Use the Application","text":"<p>The interface is divided into three main sections, from top to bottom.</p>"},{"location":"usage/#1-your-time-bank-balance","title":"1. Your Time Bank Balance","text":"<p>This top section shows a large, digital display of your total available time. This is your \"balance\" that you can spend or add to.</p>"},{"location":"usage/#2-active-timer","title":"2. Active Timer","text":"<p>This display shows the countdown of a currently running timer session. It remains at <code>00:00:00</code> until you start a timer.</p>"},{"location":"usage/#3-manage-bank-balance","title":"3. Manage Bank Balance","text":"<p>This section is for performing instant transactions on your time bank.</p> <ul> <li>Amount: This input field is where you set the time value for your transactions. You can type a value (HH:MM:SS) or use the preset buttons to adjust it.</li> <li>Preset Buttons:<ul> <li><code>+15m</code>, <code>+30m</code>, <code>+1h</code>: Click these to add time to the Amount field.</li> <li><code>-15m</code>, <code>-30m</code>, <code>-1h</code>: Click these to subtract time from the Amount field. The amount will not go below zero.</li> </ul> </li> <li>Action Buttons:<ul> <li>Deposit: Instantly adds the value in the Amount field to your main bank balance.</li> <li>Instant Withdraw: Instantly subtracts the value from your bank balance.</li> <li>Set Balance: Sets your bank balance directly to the value in the Amount field.</li> </ul> </li> </ul>"},{"location":"usage/#4-timer-controls","title":"4. Timer Controls","text":"<p>This section is for starting and managing a timed session, which \"spends\" the time from your bank.</p> <ul> <li>Start Timer: Begins a countdown using the duration set in the Amount field. This amount is immediately subtracted from your bank balance.</li> <li>Pause Timer: Pauses a running timer. The button will be disabled, and the \"Start Timer\" button will change to \"Resume Timer\".</li> <li>Stop Timer &amp; Refund: Stops the timer immediately and refunds any unused time back to your bank balance. For example, if you start a 1-hour timer and stop it after 10 minutes, 50 minutes will be deposited back into your bank.</li> </ul>"},{"location":"usage/#overdraft-mode","title":"Overdraft Mode","text":"<p>This is a key feature of the application.</p> <ul> <li>When your Active Timer counts down to zero, it doesn't just stop. It automatically enters Overdraft Mode.</li> <li>You will receive a non-blocking system notification (with a sound) alerting you to this.</li> <li>The Active Timer display will turn red, and a text indicator will appear.</li> <li>The timer will start counting up, and for every second that passes, one second will be withdrawn from your Time Bank Balance.</li> <li>To stop the overdraft, you must click the Stop Timer &amp; Refund button (though in this case, there is no time to refund). The timer will stop, and your bank balance will be whatever remains. </li> </ul>"}]}